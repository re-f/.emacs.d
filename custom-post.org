#+startup: content
#+STARTUP: hideblocks


* 为什么要学习emacs
 todo 和 文档还有项目的规划是在同一个语言体系(系统)下;个人很多todo 都是是在写规划或者文章时，所生产.过往的GTD 工具碰到的最难受的问题就是总是需要手工关联任务和文章

* Ref的Emacs 自定义设置
:PROPERTIES:
:ID:       7900ABE1-B064-4B47-89E0-EB65B9D43154
:END:
** 使用说明
本文档作为 [[http://doc.norang.ca/org-mode.org][org 文件]] 提供，您可以在 Emacs 中加载它并通过 =C-c C-v C-t=  （org-babel-tangle） 导出 custom-post.el，文件中包含本文档中所有 emacs 配置的 elisp 代码，可以将它放到你的Emacs配置目录中
** org-mode
*** 配置 org TODO 
:PROPERTIES:
:ID:       835E8AB4-81B5-46FE-BCA0-E73E6B7EDDCB
:END:
注意事项
1. TODO 关键字尽量不要使用中文, 因为 =org-tag-view= 无法支持中文
2. TODO 关键字尽量不要使用 =+/-= 之类的符号,会导致 =org-tag-view= 的快捷搜索功能( =/TODO关键字= 的搜索方式)无法搜索,只能使用 =TODO = "TODO关键字"= 的搜索方式,也许转义能使用,但是我没找到转义字符时哪个
#+begin_src emacs-lisp :tangle yes
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d@/!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")
                ))
              
        org-todo-keyword-faces (quote (
                                       ("NEXT" :foreground "blue" :weight bold)
                                       ("WAITING" . warning)
                                       ("HOLD" :foreground "magenta" :weight bold)
                                       ))

        org-use-fast-todo-selection t
        org-treat-S-cursor-todo-selection-as-state-change nil
        org-todo-state-tags-triggers      (quote
   (("CANCELLED" ("CANCELLED" . t))
                                                ;;  ("WAITING" ("WAITING???" . t))
                                                  ("HOLD" ("WAITING") ("HOLD" . t))
                                                  (done ("WAITING") ("HOLD"))
                                                  ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                                  ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                                  ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))
  )


#+end_src

*** DONE Refile 
   CLOSED: [2021-02-09 Tue 11:52]
   :PROPERTIES:
   :ID:       DCDBAD13-D0C3-4C43-9893-3CBA2B27718B
   :END:
- State "DONE"       from "NEXT"       [2021-02-09 Tue 11:52] \\
  完成：能 refile ，并在refile中能挑选出所有我需要的target
将 Headline 移到另一个 headlin 中，可以是本地的headline 也可以是其它文件的headline
- [[https://orgmode.org/manual/Refile-and-Copy.html][Manual]] 
- [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Organizing Notes With Refile]]
  - The main thing you can configure about Refile is where the target list comes from and how it is presented.
  - 默认配置中，refile 仅列出 Org Buferr 中的文件的一级 Heading
  - outline形式列出所有的 Heading
    
#+begin_src emacs-lisp :tangle yes
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5))
** 针对使用场景的配置
*** 追踪公司项目进展
公司项目[简称项目]运转并不是完全由我负责,但是经常关注项目的进展,需要获取的信息 _进展/质量/问题_,因此需要能筛选处一列表:那些是需要回顾的项目,其中存在的问题
1. 我的org文件目录除了存放TODO ,还存放知识,因此不能每次回顾所有的文件,而必须明确的列出那些是必须回顾的项目
方案:
1. +所有的项目放在project/下,每次去扫目录下文件,完成的项目archieve+: 文件太多
2. 为所有的项目标记 :项目: TAG ,并且有项目自身的状态流程
   标签: :项目:
   状态流程: 售前（PreSale）/交付中（InDelivery）/被阻塞[HOLD(h@/!)]/终止（Terminated）/结束[DONE(@/!)]

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-todo-keywords '(sequence "PreSale(s)"  "InDelivery(j)" "HOLD(h@/!)" "|" "Terminated(@/!)" "DONE(@/!)"))
  (setq org-todo-state-tags-triggers (append '(("PreSale" ("项目" . t)  ("WAITING") ("CANCELLED") ("HOLD") )
                                               ("Terminated" ("项目" . t) )
                                               ("InDelivery"  ("项目" . t) ("WAITING") ("CANCELLED") ("HOLD")))
                                             org-todo-state-tags-triggers))

#+end_src

** 未整理的内容
:PROPERTIES:
:ID:       135D5C31-BE0C-44F2-B59D-3EC49A36D675
:END:
#+begin_src emacs-lisp :tangle yes

  ;; visual alignment for Org Mode, Markdown and table.el tables on GUI Emacs.
  ;; ref: https://emacs-china.org/t/org-mode/13248
  (use-package ox-hugo
    :ensure t            ;Auto-install the package from Melpa (optional)
    :after ox)
  ;; (setq org-hugo-default-section-directory "knowledgebase")

  ;; 设置 stuck project ，参考：https://oomake.com/question/2338872
  (setq org-stuck-projects
        '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))


  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit 'org-id))

  ;;;;;;;;;;;;;; Appearance of the configuration

  (defun ref/create-org-file ()
    "Create an org file in org-directory"
    (interactive)
    (let ((name (read-string "Filename: ")))
      (expand-file-name (format "%s.org"
                                name) org-directory)))

  (setq org-capture-templates
        `(
          ("t" "TODO" entry (,(if emacs/>=26p 'file+olp+datetree 'file+datetree)
                             ,(concat org-directory "/inbox.org"))
           "* TODO %^{任务标题} %^{context||:#life:} \n:PROPERTIES:\n:Create: %U\n:Assignee: %^{指派给}\n:END:\n%^{来源||来源：%a}\n%?" :tree-type week)
          ("s" "Task " entry (,(if emacs/>=26p 'file+olp+datetree 'file+datetree)
                              ,(concat org-directory "/inbox.org"))
           "* TODO \%^{任务标题}  %^{context||:#life:} \n:PROPERTIES:\n:Create: %U\n:Assignee: %^{指派给}\n:END:\nSCHEDULED:%^t\n%^{来源||来源：%a}\n%?" :tree-type week)
          ("r" "Notes" entry (,(if emacs/>=26p 'file+olp+datetree 'file+datetree)
                              ,(concat org-directory "/inbox.org"))
           "*  %^{标题} :NOTE:%^g \n :PROPERTIES:\n:Create: %u\n:END: \n%a\n "  :tree-type week :jump-to-captured t)
          ("p" "Create Project" plain (file ref/create-org-file )
           "#+STARTUP: content \n\n* %^{项目名称}\n %? " :jump-to-captured t)
          ("l" "log" entry (file+olp, (concat org-directory "2021年团队规划.org"), "完成日志" )
           "* %u 开始字数： %? 完成字数：  ")
          ("g" "预留的组")
          ("gi" "Idea" entry (file ,(concat org-directory "/idea.org"))
           "*  %^{Title} %?\n%U\n%a\n")
          ("gb" "Book" entry (,(if emacs/>=26p 'file+olp+datetree 'file+datetree)
                              ,(concat org-directory "/book.org"))
           "* Topic: %^{Description}  %^g %? Added: %U")
          ))



  ;; 从 org-mode xx 复制过来的
  (defvar bh/hide-scheduled-and-waiting-next-tasks t)
  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))
  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))
  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p)
              nil)
             ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-non-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-task-p)
          nil)
         (t
          next-headline)))))



  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((bh/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
    Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-project-p)
         (let* ((has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                next-headline
                subtree-end))
          )
         ((org-is-habit-p)
          subtree-end)
         ((and (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (bh/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-archivable-tasks ()
    "Skip trees that are not available for archiving"
    (save-restriction
      (widen)
      ;; Consider only tasks with done todo headings as archivable candidates
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
            (subtree-end (save-excursion (org-end-of-subtree t))))
        (if (member (org-get-todo-state) org-todo-keywords-1)
            (if (member (org-get-todo-state) org-done-keywords)
                (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                       (a-month-ago (* 60 60 24 (+ daynr 1)))
                       (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                       (this-month (format-time-string "%Y-%m-" (current-time)))
                       (subtree-is-current (save-excursion
                                             (forward-line 1)
                                             (and (< (point) subtree-end)
                                                  (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                  (if subtree-is-current
                      subtree-end ; Has a date in this month or last month, skip it
                    nil))  ; available to archive
              (or subtree-end (point-max)))
          next-headline))))

  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)


  (defun bh/org-auto-exclude-function (tag)
    "Automatic task exclusion in the agenda with / RET"
    (and (cond
          ((string= tag "hold")
           t)
          ((string= tag "test")
           t)
          ((string= tag "#life")
           t))
         (concat "-" tag)))

  (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;; Agenda configuration

  ;; recursively add org file
  (setq org-agenda-files (directory-files-recursively centaur-org-directory "^[^\\.][^#].*\\.org$"))

  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote (("n" "Notes" tags "NOTE+CATEGORY=\"inbox\"-TODO=\"DONE\"-TODO=\"CANCELLED\""
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("g" "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!+TODO"
                             ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING|HOLD/!"
                             ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))

  (defun bh/show-org-agenda ()
    (interactive)
    (if org-agenda-sticky
        (switch-to-buffer "*Org Agenda( )*")
      (switch-to-buffer "*Org Agenda*"))
    (delete-other-windows))

  ;;  config tags
  (setq org-tag-alist '((:startgroup)
                        ("#work" . ?w) ("#life" . ?h)
                        (:endgroup )))
  ;; when predefined tags, need to set org-complete-tags-always-offer-all-agenda-tags,  to extend this default list to all tags used in all agenda files
  (setq org-complete-tags-always-offer-all-agenda-tags t)


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;; config keyboard shortcuts
  (global-set-key (kbd "C-M-s-a") 'bh/show-org-agenda)
  (global-set-key (kbd "<f1>") 'count-words)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;; roam configs
  (with-eval-after-load 'org-roam
    (require 'org-roam-protocol))

  (setq org-roam-capture-templates
        '(
          ("d" "default" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n#+date: %<%Y-%m-%d>\n\n#+roam_alias:\n\n")
          ("1" "Person" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "person/${slug}"
           :head "#+title: ${title}\n#+date: %<%Y-%m-%d>\n\n#+roam_alias:${title}\n\n#+hugo_section: posts/person\n#+hugo_base_dir: ../..\n\n${title}\n%?")
          ("2" "Project" entry (function org-roam-capture--get-point)
           "** ${slug} \n  :PROPERTIES: \n :项目经理: %^{项目经理} \n :区域: %^{区域}\n :END:  \n %?"
           :file-name "project/项目信息"
           :head "#+title: ${title}\n#+date: %<%Y-%m-%d>\n\n#+roam_alias:${title}\n\n#+hugo_section: posts/project\n#+hugo_base_dir: ../..\n\n%?"
           :olp ("Projects")
           :unnarrowed t
           :empty-lines 1)
          ("p" "new post" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "${slug}/_index"
           :head "#+title: ${title}\n#+date: %<%Y-%m-%d>\n\n#+roam_alias:${title}\n\n#+hugo_section: posts/${slug}\n#+hugo_base_dir: ../.QL.\n\n%?")
          ))

  ;; 解决在中文下，表格无法自动对齐的问题
  (with-eval-after-load 'org
    (require 'valign))
  (add-hook 'org-mode-hook #'valign-mode)

  ;; 配置 dired
  (put 'dired-find-alternate-file 'disabled nil)
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

  ;; 在 dired 列表中，忽略一些文件
  (setq dired-omit-files
        (concat dired-omit-files
                "\\|^.obsidian*\\|\\.organice-bak$"))
#+end_src

*** 配置
:PROPERTIES:
:ID:       15941A19-30EA-4D25-B024-B23962DF6685
:END:
默认垂直分屏，要换成水平分屏，参考： [[https://cloud.tencent.com/developer/ask/105836]]，
  
#+begin_src emacs-lisp :tangle yes
;; 新建buffer时水平分割
  (setq split-width-threshold 1 )
#+end_src

**** 编辑习惯配置
emacs 中不使用鼠标时的选中方式：[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark.html][The Mark and the Region]]
 通用的方式：=smart region= mark，如何通过光标移动，如C-f/b等开始选择区域，如何就能针对这个区域开始调用命令
***** [[https://github.com/knu/easy-kill-extras.el][easy-kill]]
:PROPERTIES:
:ID:       F253C7CC-DF16-48B8-881A-56FED4BAD759
:END:
重要功能: 快速选中（并复制）；选中行，选中list，选中引号内的内容，选中括号内的内容，甚至是选中当前buffer的文件名。如果使用的是easy－kill的功能，选中时，就会复制到剪贴板等等。
同类型的插件有：[[https://github.com/manateelazycat/thing-edit][things-edit]]
增加 easy-kill 配置：
#+begin_src emacs-lisp :tangle yes
; 配置 easy-kill 
  ;; 选中 "" 中的内容
    (add-to-list 'easy-kill-alist '(?\' squoted-string "") t)

  ;; 选中 '' 中的内容
    (add-to-list 'easy-kill-alist '(?\" dquoted-string "") t)
#+end_src
***** 多光标编辑方案：[[https://github.com/magnars/multiple-cursors.el][multiple-cousor]]
:PROPERTIES:
:ID:       09CCDB32-D709-4DBF-96CE-A44D19F8BDA6
:END:
快捷键是参考 vscode
#+begin_src emacs-lisp :tangle yes
 (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
 
;;When you want to add multiple cursors not based on   lines, but based on keywords in the buffer, use:
 
 (global-set-key (kbd "C->") 'mc/mark-next-like-this)
 (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
 (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

***** org-super-links
:PROPERTIES:
:ID:       A743C4C5-5616-4645-A2FF-6F84F541B5E6
:END:
快捷键注释调的原因： 未设置 C-c s 的 key－prefix，所以快捷键注册失败
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/lisp/org-super-links")
  (require 'org-super-links)
  (setq org-super-links-related-into-drawer t
          org-super-links-link-prefix 'org-super-links-link-prefix-timestamp)
  ;; (use-package org-super-links
  ;; ;;  :bind (("C-c s s" . org-super-links-link)
  ;; ;;         ("C-c s l" . org-super-links-store-link)
  ;; ;;         ("C-c s C-l" . org-super-links-insert-link)
  ;; ;;         ("C-c s d" . org-super-links-quick-insert-drawer-link)
  ;; ;;         ("C-c s i" . org-super-links-quick-insert-inline-link)
  ;; ;;         ("C-c s C-d" . org-super-links-delete-link))
  ;;   :config
  ;;   (setq org-super-links-related-into-drawer t
  ;;   	    org-super-links-link-prefix 'org-super-links-link-prefix-timestamp))
#+end_src



**** 显示配置
:PROPERTIES:
:ID:       7FDBAA8A-B0A6-40DF-AA7F-F111A19F9A90
:END:
将完成的 TODO Headline 上加上删除线，[[https://liangjun.work/posts/c5c41e4d/][参考]]

#+begin_src emacs-lisp :tangle yes
(setq org-fontify-done-headline t)
#+end_src




*** 实用的工具
**** 在其它的App 中打开当前buffer的文件
:PROPERTIES:
:ID:       2B17C599-5F83-4A16-A220-28AB18EDC10E
:END:
#+begin_src emacs-lisp :tangle yes
  ;; Open file in externnal App
  (defun xah-show-in-desktop ()
    "Show current file in desktop.
   (Mac Finder, Windows Explorer, Linux file manager)
  This command can be called when in a file buffer or in `dired'.
  URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
  Version 2020-11-20 2021-01-18"
    (interactive)
    (let (($path (if (buffer-file-name) (buffer-file-name) default-directory)))
      (cond
       ((string-equal system-type "windows-nt")
        (shell-command (format "PowerShell -Command Start-Process Explorer -FilePath %s" (shell-quote-argument default-directory)))
        ;; todo. need to make window highlight the file
        )
       ((string-equal system-type "darwin")
        (if (eq major-mode 'dired-mode)
            (let (($files (dired-get-marked-files )))
              (if (eq (length $files) 0)
                  (shell-command (concat "open " (shell-quote-argument (expand-file-name default-directory ))))
                (shell-command (concat "open -R " (shell-quote-argument (car (dired-get-marked-files )))))))
          (shell-command
           (concat "open -R " (shell-quote-argument $path)))))

       ((string-equal system-type "gnu/linux")
        (let (
              (process-connection-type nil)
              (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                                   "/usr/bin/gvfs-open"
                                 "/usr/bin/xdg-open")))
          (start-process "" nil openFileProgram (shell-quote-argument $path)))
        ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. eg with nautilus
        ))))
  (defun xah-open-in-vscode ()
    "Open current file or dir in vscode.

  URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
  Version 2020-02-13"
    (interactive)
    (let (($path (if (buffer-file-name) (buffer-file-name) (expand-file-name default-directory ) )))
      (message "path is %s" $path)
      (cond
       ((string-equal system-type "darwin")
        (shell-command (format "open -a Visual\\ Studio\\ Code.app \"%s\"" $path)))
       ((string-equal system-type "windows-nt")
        (shell-command (format "Code \"%s\"" $path)))
       ((string-equal system-type "gnu/linux")
        (shell-command (format "code \"%s\"" $path))))))

  (defun xah-open-in-terminal ()
    "Open the current dir in a new terminal window.
  on Microsoft Windows, it starts cross-platform PowerShell pwsh. You need to have it installed.

  URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
  Version 2020-11-21 2021-01-18"
    (interactive)
    (cond
      ((string-equal system-type "windows-nt")
      (let ((process-connection-type nil))
        (shell-command (concat "PowerShell -Command Start-Process pwsh -WorkingDirectory " (shell-quote-argument default-directory)))
        ;;
        ))
      ((string-equal system-type "darwin")
      (shell-command (concat "open -a terminal " (shell-quote-argument (expand-file-name default-directory )))))
      ((string-equal system-type "gnu/linux")
      (let ((process-connection-type nil))
        (start-process "" nil "x-terminal-emulator"
                        (concat "--working-directory=" default-directory))))))

#+end_src

**** 中文支持
:PROPERTIES:
:ID:       03445261-50A4-48ED-8147-1200ADEFA118
:END:
+ 支持中文分词
  参考： https://github.com/kanglmf/emacs-chinese-word-segmentation
  #+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/lisp/chinese-word-segmentation")
  (setq cns-prog "~/.emacs.d/lisp/chinese-word-segmentation/chinese-word-segmentation")
  (setq cns-dict-directory "~/.emacs.d/lisp/chinese-word-segmentation/dict")
  (setq cns-recent-segmentation-limit 20) ; default is 10
  (setq cns-debug nil) ; disable debug output, default is t
  (require 'cns nil t)
  (when (featurep 'cns)
    (add-hook 'find-file-hook 'cns-auto-enable))
  #+end_src

+ 使用内置的中文输入法
 https://github.com/tumashu/pyim，  使用内置的中文输入法的原因：频繁切换中英文输入法，打破了使用时行云流水的感觉，使用内置的中文输入法，可以做到，中文输入时同时使用emacs的快捷键

#+begin_src emacs-lisp :tangle yes
(require 'pyim)
(require 'pyim-basedict) ; 拼音词库设置，五笔用户 *不需要* 此行设置
(pyim-basedict-enable)   ; 拼音词库，五笔用户 *不需要* 此行设置
(setq default-input-method "pyim")

;;(setq pyim-punctuation-translate-p '(auto yes no)) 
#+end_src

**** 统计emacs常用命令调用
:PROPERTIES:
:ID:       3F1A03DF-D53A-472C-99C2-8A9008C37563
:END:
#+begin_src emacs-lisp :tangle yes
  (require 'keyfreq)
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)

  (setq keyfreq-excluded-commands
        '(insert-self-forward
          self-insert-command
          mwheel-scroll
          command-backward
          char-previous
          line-char
          next-mwheel
          line-scroll
          org-self-insert-command
          ))
#+end_src

**** 搜索: [[https://github.com/manateelazycat/color-rg][color-rg]]
:PROPERTIES:
:ID:       4FE38B8C-524D-4AC7-8D58-CA9D969F5749
:END:
需要实现的功能：
1. rg的功能
   - 指定目录搜索
2. 全文替换
 备注：
   1) 按下r后，按 y 或者 n 来表示是否替换当前行，按！替换所有。 这个和Emacs的行为一致
   2) 如果搜索出来的结果有些不想处理，可以通过filter/delete 去除一些搜索结果再替换

#+begin_src emacs-lisp :tangle yes
(require 'color-rg)
(global-set-key (kbd "s-F") 'color-rg-search-symbol)
;; using `isearch-forward', type "M-s M-s" to search current isearch string with color-rg.
;;(define-key isearch-mode-map (kbd "M-s M-s") 'isearch-toggle-color-rg)
#+end_src

* End
:PROPERTIES:
:ID:       2D64F1B5-2995-4EAB-9844-CD106DE68160
:END:
#+begin_src emacs-lisp :tangle yes
;;; custom-post.el ends here
#+end_src
